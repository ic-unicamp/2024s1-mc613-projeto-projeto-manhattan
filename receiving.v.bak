module receiving (
    input clk,
    input reset,
    input writing,
    input dot,
    input dash,
    input interword,
    input interchar,
    input read_in,
    output reg read_out,
    output reg [9:0] data_out,
    output reg complete
);

/*
    In data_out:
        -> 2'b00: NULL
        -> 2'b01: dot
        -> 2'b10: dash
*/

reg state;
reg [2:0] size;

always @(posedge clk) begin
    if (reset) begin
        size = 0;
        state = 0;
        read_out = 0;
        complete = 0;

        data_out = 0; // 2'b00 is the null. the data is empty
    end else begin
        case (state) 
            0: begin
                read_out = 0;
                if (writing) begin
                    state = 1;
                end      
            end 
            1: begin
                /*
                    -> 2'b01: dot
                    -> 2'b10: dash
                */
                if (dot) begin
                    data_out = {data_out[7:0], 2'b01};
                end else if (dash) begin
                    data_out = {data_out[7:0], 2'b10};
                end

                if (interchar or interword) begin
                    state = 2;
                    complete = 1;    
                end else begin
                    read_out = 1;
                    state = 0; 
                end
            end
            2: begin
                if (read_in) begin
                    state = 0;
                    read_out = 1;
                    complete = 0;
                    data_out = 0; // 2'b00 is the null. the data is empty  
                end
            end 
            default: begin
                size = 0;
                state = 0;
                read_out = 0;
                complete = 0;
                data_out = 0; // 2'b00 is the null. the data is empty   
            end 
        endcase
    end
end;

endmodule